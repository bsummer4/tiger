open TigerDefs;

%%

%name Tiger
%eop Eof
%pos int
%noshift Eof
%start prog
%verbose 

%nonassoc Do If Of
%nonassoc Else

%nonassoc Assign
%nonassoc And Or
%nonassoc Eq Neq Lt Le Gt Ge

%left Add Sub
%left Mul Div

%nonassoc Umin

%term Eof    | Comma | Colon | Semi | Lparen | Rparen | Lbrak | Rbrak | Lbrace 
    | Rbrace | Dot   | Add   | Sub  | Mul    | Div    | Eq    | Neq   | Lt 
    | Le     | Gt    | Ge    | And  | Or     | Assign | Array | If    | Then 
    | Else   | While | For   | To   | Do     | Let    | In    | End   | Of 
    | Break  | Nil   | Fun   | Var  | Type   | Umin

    | String of string | Integer of int | Id of string

%nonterm prog of exp   | exp of exp       | const of exp
       | string of exp | number of exp    | seq of exp
       | call of exp   | args of exp list | record of exp
       | opexp of exp  | flow of exp      | lval of exp
       | array of exp  | assign of exp    | var of var
       | let' of exp   | decs of dec list | dec of dec
       | ty of ty      | tfield of field  | tdec of dec
       | fdec of dec   | vdec of dec

       | seq' of (exp * pos) list | tfields of field list
       | tfields' of field list   | optvar of tvars list
       | rfields of (sym * exp * pos) list
%%

prog : exp (exp)

exp : const  (const)
    | seq    (seq)
    | call   (call)
    | record (record)
    | opexp  (opexp)
    | flow   (flow)
    | lval   (lval)
    | array  (array)
    | assign (assign) 
    | let'   (let')

const : String  (STR(String,Stringleft))
      | Integer (INT Integer)
      | Nil     (NIL)

seq  : Lparen Rparen      (SEQ [])
     | Lparen seq' Rparen (SEQ seq')
seq' : seq' Semi exp      ((exp,expleft) :: seq')
     | exp                ([(exp,expleft)])

call : Id Lparen Rparen      (newcall(mk Id, [], Idleft))
     | Id Lparen args Rparen (newcall(mk Id, args, Idleft))
args : args Comma exp        (exp :: args)
     | exp                   ([exp])

record  : Id Lbrace Rbrace         (newrec(mk Id, [], Idleft))
        | Id Lbrace rfields Rbrace (newrec(mk Id, rfields, Idleft))
rfields : rfields Comma Id Eq exp  ((mk Id, exp, Idleft) :: rfields)
        | Id Eq exp                ([(mk Id, exp, Idleft)])

opexp : Sub exp %prec Umin    (newop(INT 0,SUB,exp,Subleft))
      | exp Add exp %prec Add (newop(exp1,ADD,exp2,exp1left))
      | exp Sub exp %prec Sub (newop(exp1,SUB,exp2,exp1left))
      | exp Mul exp %prec Mul (newop(exp1,MUL,exp2,exp1left))
      | exp Div exp %prec Div (newop(exp1,DIV,exp2,exp1left))
      | exp Eq exp  %prec Eq  (newop(exp1,EQ,exp2,exp1left))
      | exp Neq exp %prec Neq (newop(exp1,NEQ,exp2,exp1left))
      | exp Lt exp  %prec Lt  (newop(exp1,LT,exp2,exp1left))
      | exp Le exp  %prec Le  (newop(exp1,LE,exp2,exp1left))
      | exp Gt exp  %prec Gt  (newop(exp1,GT,exp2,exp1left))
      | exp Ge exp  %prec Ge  (newop(exp1,GE,exp2,exp1left))
(*
      | exp And exp %prec And (newop(exp1,AND,exp2,exp1left))
      | exp Or exp  %prec Or  (newop(exp1,OR,exp2,exp1left))
*)

flow : Break                           (BREAK Breakleft)
     | While exp Do exp                (newwhile(exp1,exp2,Whileleft))
     | If exp Then exp %prec If        (newif(exp1,exp2,NONE,Ifleft))
     | If exp Then exp Else exp        (newif(exp1,exp2,SOME exp3,Ifleft))
     | For Id Assign exp To exp Do exp (newfor(mk Id,exp1,exp2,exp3,Forleft))

lval   : var (VAR var)

var    : Id optvar              (newvar ((mk Id, Idleft), optvar))
optvar : Dot Id                 ([TFIELD (mk Id, Dotleft)])
       | Lbrak exp Rbrak        ([TINDEX (exp, Lbrakleft)])
       | Dot Id optvar          (TFIELD (mk Id, Dotleft) :: optvar)
       | Lbrak exp Rbrak optvar (TINDEX (exp, Lbrakleft) :: optvar)

array  : Id Lbrak exp Rbrak Of exp (newarray(mk Id,exp1,exp2,Idleft))

assign : var Assign exp (newassign(var,exp,varleft))

let'  : Let decs In seq End (newlet(newdec decs,seq,Letleft))
decs  : decs dec (dec :: decs)
      | dec      ([dec])
dec   : tdec     (tdec)
      | fdec     (fdec)
      | vdec     (vdec)
vdec  : Var Id Assign exp
          (newvardec(mk Id, NONE, exp, Varleft))
      | Var Id Colon Id Assign exp 
          (newvardec(mk Id1,SOME (mk Id2, Id2left), exp, Varleft))
fdec  : Fun Id Lparen tfields Rparen Eq exp 
          (newfundec(mk Id, tfields, NONE, exp, Funleft))
      | Fun Id Lparen tfields Rparen Colon Id Eq exp
          (newfundec(mk Id1, tfields, SOME (mk Id2, Id2left), exp, Funleft))
tdec  : Type Id Eq ty
          (newtypedec(mk Id1, ty, Typeleft))

ty       : Id                    (NAME_TY(mk Id, Idleft))
         | Lbrace tfields Rbrace (REC_TY(tfields))
         | Array Of Id           (ARRAY_TY(mk Id, Arrayleft))
tfields  : tfields' (tfields')
         |          ([])
tfields' : tfields' Comma tfield (tfield :: tfields')
         | tfield                ([tfield])
tfield   : Id Colon Id           (newfield(mk Id1, mk Id2, Id1left))
