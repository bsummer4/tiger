# The Tiger Language
Material for teaching compilers is forced to choose between focusing on
language design or focusing on compiler implementation.  Asking students
to design their own language requires significant investment and takes
a lot of time away from the compiler implementation.  Furthermore,
students with poor initial designs will end up spending a significant
amount of time repeatedly redesigning the languages as they come against
the limitations of their initial designs.  One alternative is to provide
students with a pre-designed language.  This allows the students to focus
on compiler implementation, but doesn't completely remove the language
design aspect from the material.  Students can implement an initial
compiler for a simple, canned language, then later, design extensions
for it.  A Language must be carefully designed if it is intended to be
used in this way.

Tiger is a programming language that was designed for this purpose
by Andrew W. Appel.  It was released along with his book, Modern
Compiler Implementation, as the primary source language.  There are
actually three books, each with the same material but using different
implementation languages.  The book focuses on implementing a compiler
of some sophistication for languages with modern features.

The book is broken down into two sections.  The first is designed for
an undergraduate compilers course where students implement a simple
but complete compiler for Tiger.  The second is designed to focus
on adding advanced language features and optimizations.  Because of
this format, Tiger had to be carefully designed to meet both needs.
Tiger itself only directly fulfills the needs of the first section, but
it is designed to be easily evolved into a more sophisticated language.
Specifically, the design of Tiger makes it easy to add functional and
object-oriented features.

Tiger tries to be simple to implement by supporting only the bare minimum
set of features required to write realistic programs.  It contains only
a handful of object types, built-in functions, and control structures.
There is a primitive, static type system with manifest type declarations.
Like many languages, primitive objects are passed by value, and compound
objects, which are always stored on the heap, are passed by reference.

## The Type System
Tiger's type system is very straightforward to implement.  The overall
simplicity of the type system makes types easy to verify and makes
code generation simple.  Manifest type declarations avoid the need
for complicated type-inference algorithms, while static typing saves
a lot of trouble generating dynamic type tests.  Static type systems
also make it possible to generate efficient code without complicated
interprocedural optimizations.

## Data Structures and Pointers
Tiger's heap-allocated arrays and records are necessary for implementing
data structures such as lists and trees.  Automatic heap management
also gives compiler-writers an opportunity to learn about the various
garbage collection techniques.  While Tiger implementations clearly
must use pointers in their implementation of heap-allocated objects,
the language does not make pointers first-class.  This makes it possible
to use precise garbage collection algorithms.  Languages with explicit
pointer manipulation are forced to use conservative garbage collection
algorithms which are slower and much more difficult to implement.

## Major Extensions
Tiger's nested functions and heap-allocated records make it easy to
extend the language with first class functions, objects, and classes.
First class functions can be added simply by inserting syntax for function
type declarations and by adding back-end code to handle closures.
Objects and classes are just syntactic sugar on top of structs and
closures, so they are also quite easy to implement.

## Summary of Features
- Types
	`int', `string', arrays of any type, records of any type.

- Operators
	`+', `-', `*', `/', `=', `<>', `<', `>', `>=', and `<='.

- Control Flow
	`&', `|', `if-then', `if-then-else', `let', `for', `while',
	`break', functions, and recursion.  `&', and `|' work just like
	`&&' and `||' do in C.

- Standard Library
	| print(s:string)
	| printi(i:int)
	| flush()
	| getchar(): string
	| ord(char:string): int
	| chr(code:int): string
	| size(s:string): int
	| substring(s:string,f:int,n:int): string
	| concat(s1:string,s2:string): string
	| not(i:int): int
	| exit(i:int)
